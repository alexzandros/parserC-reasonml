// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Complex = require("bs-platform/lib/js/complex.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var hola = Printf.printf(/* Format */[
      /* String_literal */Block.__(11, [
          "Hola, mi nombre es ",
          /* String */Block.__(2, [
              /* No_padding */0,
              /* End_of_format */0
            ])
        ]),
      "Hola, mi nombre es %s"
    ]);

var nombres = /* :: */[
  "Nanita",
  /* :: */[
    "Arturito",
    /* :: */[
      "Thorcito",
      /* :: */[
        "Oshito",
        /* [] */0
      ]
    ]
  ]
];

List.iter(hola, nombres);

function add1(param) {
  return 1 + param | 0;
}

function equals2(x) {
  return x % 2 === 0;
}

List.filter(equals2)($$Array.to_list($$Array.map(add1, $$Array.init(100, (function (param) {
                    return 1 + param | 0;
                  })))));

function bind(f, valor) {
  if (valor !== undefined) {
    return Curry._1(f, Caml_option.valFromOption(valor));
  }
  
}

var c1 = /* record */[
  /* re */4,
  /* im */2
];

var c2 = /* record */[
  /* re */1,
  /* im */2
];

Complex.mul(c1, c2);

var Three = /* module */[/* x */3];

var Four = /* module */[/* x */4];

var numbers_001 = /* :: */[
  Four,
  /* :: */[
    /* module */[/* x */5],
    /* [] */0
  ]
];

var numbers = /* :: */[
  Three,
  numbers_001
];

function to_int(M) {
  return M[/* x */0];
}

function plus(m1, m2) {
  var x = m1[/* x */0] + m2[/* x */0] | 0;
  return /* module */[/* x */x];
}

var $star$slash = Complex.mul;

var three = Three;

var New_three = Three;

exports.hola = hola;
exports.nombres = nombres;
exports.add1 = add1;
exports.equals2 = equals2;
exports.bind = bind;
exports.c1 = c1;
exports.c2 = c2;
exports.$star$slash = $star$slash;
exports.Three = Three;
exports.Four = Four;
exports.three = three;
exports.numbers = numbers;
exports.New_three = New_three;
exports.to_int = to_int;
exports.plus = plus;
/* hola Not a pure module */
